"use strict";(self.webpackChunkcrypto_101_docs=self.webpackChunkcrypto_101_docs||[]).push([[505],{3905:function(t,e,r){r.d(e,{Zo:function(){return u},kt:function(){return f}});var n=r(7294);function o(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function c(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function a(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?c(Object(r),!0).forEach((function(e){o(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function i(t,e){if(null==t)return{};var r,n,o=function(t,e){if(null==t)return{};var r,n,o={},c=Object.keys(t);for(n=0;n<c.length;n++)r=c[n],e.indexOf(r)>=0||(o[r]=t[r]);return o}(t,e);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(t);for(n=0;n<c.length;n++)r=c[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(o[r]=t[r])}return o}var s=n.createContext({}),l=function(t){var e=n.useContext(s),r=e;return t&&(r="function"==typeof t?t(e):a(a({},e),t)),r},u=function(t){var e=l(t.components);return n.createElement(s.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var r=t.components,o=t.mdxType,c=t.originalType,s=t.parentName,u=i(t,["components","mdxType","originalType","parentName"]),d=l(r),f=o,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||c;return r?n.createElement(m,a(a({ref:e},u),{},{components:r})):n.createElement(m,a({ref:e},u))}));function f(t,e){var r=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var c=r.length,a=new Array(c);a[0]=d;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i.mdxType="string"==typeof t?t:o,a[1]=i;for(var l=2;l<c;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7300:function(t,e,r){r.r(e),r.d(e,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return u},default:function(){return d}});var n=r(7462),o=r(3366),c=(r(7294),r(3905)),a=["components"],i={sidebar_position:2},s="Our First Contract",l={unversionedId:"our-first-contract",id:"our-first-contract",title:"Our First Contract",description:"<iframe",source:"@site/docs/our-first-contract.mdx",sourceDirName:".",slug:"/our-first-contract",permalink:"/crypto-101-docs/docs/our-first-contract",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/our-first-contract.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Start Here",permalink:"/crypto-101-docs/docs/intro"},next:{title:"Writing Test for Contracts",permalink:"/crypto-101-docs/docs/writing-tests-for-contracts"}},u=[{value:"Scaffold your contract workspace",id:"scaffold-your-contract-workspace",children:[],level:2},{value:"The finished code",id:"the-finished-code",children:[{value:"Test your contract",id:"test-your-contract",children:[],level:3}],level:2}],p={toc:u};function d(t){var e=t.components,r=(0,o.Z)(t,a);return(0,c.kt)("wrapper",(0,n.Z)({},p,r,{components:e,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"our-first-contract"},"Our First Contract"),(0,c.kt)("div",{style:{position:"relative",paddingBottom:"56.25%",height:0}},(0,c.kt)("iframe",{src:"https://www.loom.com/embed/85c03d49207b47618d19cb888d135620",frameborder:"0",webkitallowfullscreen:!0,mozallowfullscreen:!0,allowfullscreen:!0,style:{position:"absolute",top:0,left:0,width:"100%",height:"100%"}})),(0,c.kt)("h2",{id:"scaffold-your-contract-workspace"},"Scaffold your contract workspace"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir contracts test scripts\n")),(0,c.kt)("h2",{id:"the-finished-code"},"The finished code"),(0,c.kt)("p",null,"Create a new file in the ",(0,c.kt)("inlineCode",{parentName:"p"},"contracts")," directory called ",(0,c.kt)("inlineCode",{parentName:"p"},"contracts/Contract.sol"),":"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: Unlicensed\npragma solidity ^0.8.10;\n\ncontract Contract {\n    string public greeting = "Hello World";\n\n    function sayHello() public view returns (string memory) {\n        return greeting;\n    }\n}\n')),(0,c.kt)("h3",{id:"test-your-contract"},"Test your contract"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-typescript"},'import chai from "chai";\nimport "@nomiclabs/hardhat-ethers";\nimport "@nomiclabs/hardhat-waffle";\nimport { solidity } from "ethereum-waffle";\nimport { ethers } from "hardhat";\n\nconst { expect } = chai.use(solidity);\n\ndescribe("Our first Contract", () => {\n  it("has a method called sayHello which returns a string \'Hello World\'", async () => {\n    const Contract = await ethers.getContractFactory("Contract");\n    const contract = await Contract.deploy();\n    await contract.deployed();\n    const greeting = await contract.sayHello();\n    expect(greeting).to.eql("Hello World");\n  });\n});\n')))}d.isMDXComponent=!0}}]);