"use strict";(self.webpackChunkcrypto_101_docs=self.webpackChunkcrypto_101_docs||[]).push([[781],{3905:function(t,e,n){n.d(e,{Zo:function(){return s},kt:function(){return f}});var r=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function c(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?c(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function a(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},c=Object.keys(t);for(r=0;r<c.length;r++)n=c[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(t);for(r=0;r<c.length;r++)n=c[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var l=r.createContext({}),u=function(t){var e=r.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},s=function(t){var e=u(t.components);return r.createElement(l.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},p=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,c=t.originalType,l=t.parentName,s=a(t,["components","mdxType","originalType","parentName"]),p=u(n),f=o,m=p["".concat(l,".").concat(f)]||p[f]||d[f]||c;return n?r.createElement(m,i(i({ref:e},s),{},{components:n})):r.createElement(m,i({ref:e},s))}));function f(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var c=n.length,i=new Array(c);i[0]=p;var a={};for(var l in e)hasOwnProperty.call(e,l)&&(a[l]=e[l]);a.originalType=t,a.mdxType="string"==typeof t?t:o,i[1]=a;for(var u=2;u<c;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},522:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return a},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return s},default:function(){return p}});var r=n(7462),o=n(3366),c=(n(7294),n(3905)),i=["components"],a={sidebar_position:4},l="Solidity TDD: Counter Contract",u={unversionedId:"tdd-contract-development",id:"tdd-contract-development",title:"Solidity TDD: Counter Contract",description:"<iframe",source:"@site/docs/tdd-contract-development.mdx",sourceDirName:".",slug:"/tdd-contract-development",permalink:"/crypto-101-docs/docs/tdd-contract-development",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tdd-contract-development.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Writing Test for Contracts",permalink:"/crypto-101-docs/docs/writing-tests-for-contracts"},next:{title:"Running a local Blockchain Node with Hardhat",permalink:"/crypto-101-docs/docs/running-a-local-blockchain-node"}},s=[{value:"Solution",id:"solution",children:[],level:2},{value:"Finished Tests",id:"finished-tests",children:[],level:2},{value:"Finished Counter Contract",id:"finished-counter-contract",children:[],level:2}],d={toc:s};function p(t){var e=t.components,n=(0,o.Z)(t,i);return(0,c.kt)("wrapper",(0,r.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"solidity-tdd-counter-contract"},"Solidity TDD: Counter Contract"),(0,c.kt)("div",{style:{position:"relative",paddingBottom:"56.25%",height:0}},(0,c.kt)("iframe",{src:"https://www.loom.com/embed/64874fe0a93f419fbb4608f522dc6804",frameborder:"0",webkitallowfullscreen:!0,mozallowfullscreen:!0,allowfullscreen:!0,style:{position:"absolute",top:0,left:0,width:"100%",height:"100%"}})),(0,c.kt)("h2",{id:"solution"},"Solution"),(0,c.kt)("div",{style:{position:"relative",paddingBottom:"56.25%",height:0}},(0,c.kt)("iframe",{src:"https://www.loom.com/embed/9e35f7175abf4d0dbf3a64307158b866",frameborder:"0",webkitallowfullscreen:!0,mozallowfullscreen:!0,allowfullscreen:!0,style:{position:"absolute",top:0,left:0,width:"100%",height:"100%"}})),(0,c.kt)("h2",{id:"finished-tests"},"Finished Tests"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-typescript"},'import chai from "chai";\nimport "@nomiclabs/hardhat-ethers";\nimport "@nomiclabs/hardhat-waffle";\nimport { ethers } from "hardhat";\nimport { solidity } from "ethereum-waffle";\n\nconst { expect } = chai.use(solidity);\n\nasync function deployCounter() {\n  const Counter = await ethers.getContractFactory("Counter");\n  const counter = await Counter.deploy();\n  await counter.deployed();\n  return counter;\n}\n\ndescribe("Counter contract", () => {\n  it("has a method called \'getCount\' which should initially return 0", async () => {\n    const counter = await deployCounter();\n    const count = await counter.getCount();\n    expect(count).to.eql(0);\n  });\n  it("when increment is called increments the counter", async () => {\n    const counter = await deployCounter();\n    await counter.increment();\n    const count = await counter.getCount();\n    expect(count).to.eql(1);\n  });\n\n  it("when decrement is called decrements the counter", async () => {\n    const counter = await deployCounter();\n    await counter.increment();\n    const count = await counter.getCount();\n    expect(count).to.eql(-1);\n  });\n});\n')),(0,c.kt)("h2",{id:"finished-counter-contract"},"Finished Counter Contract"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-solidity"},"// SPDX-License-Identifier: Unlisenced\npragma solidity ^0.8.10;\n\ncontract Counter {\n    int16 private count;\n\n    constructor() {\n        count = 0;\n    }\n\n    function getCount() public view returns (int16) {\n        return count;\n    }\n\n    function increment() public {\n        count++;\n    }\n\n    function decrement() public {\n        count--;\n    }\n}\n")))}p.isMDXComponent=!0}}]);